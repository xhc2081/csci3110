Q1
import java.util.Scanner;





/**
 * 
 * Fomula : f(x)= 	1. if x < 0 ---> 0
 * 			2. if x == 1 -----> 1
 * 			3. if x > 1 ----> f(x-1)+f(x-2)+f(x-3)
 * 
 * Implemention below O(3^n)
 * 
 * array a is for memoization
 * 
 * Complexity is O(n)
 *
 */
public class Q1 {
	
	//a array to memorize the result
	int a[]=new int[100005];
	
	//scanner for input
	Scanner scanner=new Scanner(System.in);
	
	/**
	 * constructor to init the array
	 */
	public Q1() {
		// TODO Auto-generated constructor stub
		
		//init for a array
		for(int i=0;i<a.length;i++)
		{
			a[i]=0;
		}
		a[0]=1;
	}
	
	/**
	 * calculate the result according to the fomula
	 * @param x
	 * @return
	 */
	public int getRes(int x)
	{
		if(x<0)
			return 0;
		if(x==0)
			return 1;
		if(a[x]!=0)
		{
			return a[x];
		}
		int sum=0;
		for(int i=1;i<=3;i++)
		{
			sum+=getRes(x-i);
		}
		a[x]=sum;
		return sum;
	}
	
	/**
	 * for program run , user input and output
	 */
	public void run()
	{
		while(true)
		{
			System.out.print("Please input the number of n :");
			int n=scanner.nextInt();
			int res=getRes(n);
			System.out.println("The number of all possible move is : "+res);
		}
	}
	
	public static void main(String[] args) {
		
		Q1 q1=new Q1();
		q1.run();
		
	}
	
}

Q2
import java.util.Scanner;




/**
 * 
 * Part 1 : 
	 * Fomula : f(x)= 	1. if x,y < 0 ---> 0
	 * 					2. if x,y == 0 -----> 1
	 * 					3. else for x,y ----> f(x-1,y)+f(x,y-1)
	 * 
	 * Implemention below
	 * 
	 * array a is for memoization
	 * 
	 * Complexity is O(n*m)
 *
 *
 * Part 2 : 
	 * Fomula : f(x)= 	1. if x,y < 0 ---> 0
	 * 					2. if x,y == 0 -----> 1
	 * 					3. if x,y is block ----->0
	 * 					4. else for x,y ----> f(x-1,y)+f(x,y-1)
	 * 
	 * Implemention below
	 * 
	 * array a is for memoization
	 * 
	 * Complexity is O(n*m)
 *
 */
public class Q2 {
	

	//a array to memorize the result
	int a[][]=new int[1005][1005];
	//record block grid
	boolean block[][]=new boolean[1005][1005];

	//scanner for input
	Scanner scanner=new Scanner(System.in);
	
	/**
	 * constructor to init the array
	 */
	public Q2() {
		// TODO Auto-generated constructor stub
		
		//init for a array
		for(int i=0;i<a.length;i++)
		{
			for(int j=0;j<a[i].length;j++)
			{
				a[i][j]=0;
				block[i][j]=false;
			}
		}
		a[0][0]=1;
	}
	
	/**
	 * calculate the result according to the fomula
	 * @param x
	 * @return
	 */
	public int getRes(int x,int y)
	{
		if(x<0||y<0)
			return 0;
		if(x==0&&y==0)
			return 1;
		if(block[x][y])
			return 0;
		if(a[x][y]!=0)
		{
			return a[x][y];
		}
		int sum=0;
		sum+=getRes(x-1, y);
		sum+=getRes(x, y-1);
		a[x][y]=sum;
		return sum;
	}
	
	/**
	 * for part 1 program run , user input and output
	 */
	public void part1()
	{
		System.out.print("For part 1, Please input the number of x and y :");
		int x=scanner.nextInt();
		int y=scanner.nextInt();
		int res=getRes(x,y);
		System.out.println("The number of all possible move is : "+res);
		
	}

	/**
	 * print the path of x,y
	 * @param x
	 * @param y
	 */
	void printPath(int x,int y)
	{
		if(x==0&&y==0)
			System.out.println(x+" "+y);
		else
		{
			if(getRes(x-1, y)>0)
			{
				printPath(x-1, y);
				System.out.println(x+" "+y);
			}
			else if(getRes(x,y-1)>0)
			{
				printPath(x, y-1);
				System.out.println(x+" "+y);
			}
		}
	}
	
	/**
	 * for part 2 program run , user input and output
	 */
	public void part2()
	{
		System.out.println();
		System.out.println();
		System.out.println();
		System.out.print("For part 2, Please input the number of x and y :");
		int x=scanner.nextInt();
		int y=scanner.nextInt();
		System.out.print("Please input the block number: ");
		int n=scanner.nextInt();
		for(int i=0;i<n;i++)
		{
			System.out.print("Input the "+(i+1)+"th block position : ");
			int temx=scanner.nextInt();
			int temy=scanner.nextInt();
			block[temx][temy]=true;
		}
		
		int res=getRes(x, y);
		System.out.println("The number of all possible move is : "+res);
		System.out.println("Path below");
		printPath(x, y);
	}
	
	public static void main(String[] args) {
		
		Q2 q2=new Q2();
		q2.part1();
		q2=new Q2();
		q2.part2();
		
	}
}

Q3

  A).
  Using tree representation implement the process below：
				␣ （Root）
	 			|	
				|
 level1： 	     ■ ▲			■ ■
  	   	      |				|
  	  	      |				|
 level2：  ▲●▲	smile▲	cry▲		    ■▲■  ■●■	■No emotion	■cry .....(This level extend from ■ ▲) 
  	  ▲●■	smile■	cry■	.................(This level extend from ■ ■)
 
 the rest level can be done in the same manner...
 
 We search each  time，can decide if this extend the purpose emojis which are 【smile，cry，no emotion，cary，smile】
 This status，thats the conclusion we got， the depth of the tree is the smallest steps we need.
  
 
  B).
  This must be the（optimal-substructure），Because we first get some status，so,that status must be the first arrive place.
  Because we serach this level by level，This is like the (BFS) algorithm.
 
  C)Design the details，First, the whole search process，we can use a (queue) to represent，
  At the beginning，add 【␣】 in queue，
  Every time we take a element from queue，then, extend it，we determin the result of extension
  If the results same with the staus we want，thats means we get the solution, output it.
  If the length of element bigger than five, thats means the status is a null status，we dont consider it.
  If thats empty queue，thats means we cannot get the status we want.
  
  E)
 		pseudocode 		
  		BFS():									//use BFS
  			queue.push('␣')							//add start to queue
  			
 			while(!queue.isempty)						//if empty break
  				start = queue.pop()					//take every header, become the start point
 				for every condition:					//consider evry condition
 					end = start.expand()				//extend id
 					if(end == aim)					//get the aim point 
 						print result and exit.			//output
 			
 			if(queue.isempty)						//if queue empty couldnt get the solu
  				print no result						//no result
 
Q4

Optimal substructure if an optimal solution can be constructed efficiently from optimal solutions of its subproblems.
This property is used to determine the usefulness of dynamic programming and greedy algorithms for a problem.

Two problems without Optimal Substructure
1. Longest Path Problem

	






EG:
 Find the longest path between two vertices without repeating an edge.
	LongestPath(A,C)
	solution: (A-E-D-C)








 If Principle of Optimality applies to Longest Path Problem:
 Split up the Problem into Optimal Sub Parts
 LongestPath(A,C)
 LongestPath(A,D) + (D-C) Wrong

 The sub solutions do not combine to form the overall optimal solution

 The Longest Path Problem does not exhibit Optimal Substructure

2. Maximum Clique Problem














 Definition: Clique - Vertices are all attached to each other.
 Definition: Maximal Clique - A clique with the most vertices in a graph.
EG: 
 Vertices = {1,2,3,4,5,6,7,8,9}
 Maximal Clique = {5,6,7,8,9}
 Vertices = {1,2,3,4,5,6,7} + {8,9}
 cliques = {1,2,3,4},{5,6,7} + {8,9}

 We Cannot break down the set of vertices into smaller sub problems and maintain the overall optimal solution.

 This problem does not exhibit optimal sub structure.










